name: Build

on:
  # trigger for any new pull request
  pull_request:
  # trigger on pushes with changes to branch master
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  #codestyle:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Set up Rust
  #      uses: hecrj/setup-rust-action@v1
  #      with:
  #        components: rustfmt
  #        rust-version: nightly
  #    - uses: actions/checkout@v2
  #    - run: cargo fmt --all -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]

    steps:
    #- uses: hecrj/setup-rust-action@v1
    #  with:
    #    rust-version: ${{ matrix.rust }}

    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features

    - uses: actions/checkout@master
    #- uses: actions/checkout@v2

    - name: Cache rust and cargo builds
      id: cache-cargo
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-cache-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          $HOME/.cargo/bin/
          $HOME/.cargo/registry/index/
          $HOME/.cargo/registry/cache/
          $HOME/.cargo/git/db/
          target/

    #- name: Build and install orbtk-book (no default features)
    #  run: cargo build --release --no-default-features

    - name: Build and install mdbook binary (with localization support)
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      id: mdbook
      run: |
        # compile given git branch `localization` from repo `Ruin0x11` and install it as `mdbook` binary
        cargo install --branch localization --git https://github.com/Ruin0x11/mdbook --version 0.4.15 mdbook
        #echo "$(pwd)/bin" >> ${GITHUB_PATH}

    - name: Build and install mdbook-mermaid binary
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      id: mdbook-mermaid
      run: |
        cargo install mdbook-mermaid

    - name: Build orbtk-book binaries (all features)
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      id: orbtk-book
      run: cargo install --all-features --path .

    - name: Archive cargo artifact
      uses: actions/upload-artifact@v3
      with:
       name: cargo-artifact
       path: "$HOME/.cargo/bin"
       retention-days: 5

    - name: Show env
      run: |
        ls -l $HOME/.cargo/bin/
        which mdbook
        which mdbook-mermaid

  lint:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]

    steps:
    #- uses: hecrj/setup-rust-action@v1
    #  with:
    #    rust-version: ${{ matrix.rust }}

    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features


    - name: Download archived cargo artifact
      uses: actions/download-artifact@v3
      with:
        name: cargo-artifact

    - name: Report versions
      env:
        PATH: "$PATH:$HOME/.cargo/bin"
      run: |
        ls
        ls -l /.cargo/bin/
        rustup --version
        rustc -Vv
        mdbook --version
        mdbook-mermaid --version

    #- name: Run spellcheck
    #  run: |
    #    LANG=en bash ci/spellcheck.sh list

    - name: Validate local file paths
      run: |
        mdbook build --language en --dest-dir wiki/orbtk-book/en
        cargo run --bin lfp src

    - name: Validate references
      run: bash ci/validate.sh

    - name: Check for broken links
      run: |
        curl -sSLo linkcheck.sh \
        https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh
        # Cannot use --all here because of the generated redirect pages aren't available.
        sh linkcheck.sh book

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        language: [en]
    env:
      PATH: "$PATH:/.cargo/bin"

    steps:
    #- uses: hecrj/setup-rust-action@v1
    #  with:
    #    rust-version: ${{ matrix.rust }}

    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features

    - name: Download archived cargo artifac
      uses: actions/download-artifact@v3
      with:
        name: cargo-artifact

    - if: ${{ matrix.language }}
      name: Test book for language ${{ matrix.language }}
      #run: mdbook test --language en --dest-dir wiki/orbtk-book/en
      run: |
        mdbook-mermaid install
        mdbook test --language ${{ matrix.language }} --dest-dir wiki/orbtk-book/${{ matrix.language }}

  render-books:
    needs: [lint, build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        language: [en, de]
    env:
      PATH: "$PATH:/.cargo/bin"

    steps:
    #- uses: hecrj/setup-rust-action@v1
    #  with:
    #    rust-version: ${{ matrix.rust }}

    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features

    - name: Download archived cargo artifac
      uses: actions/download-artifact@v3
      with:
        name: cargo-artifact

    - if: ${{ matrix.language }}
      name: Build book for language ${{ matrix.language }}
      run: |
        rustup --version
        rustc -Vv
        mdbook --version
        mdbook-mermaid --version
        mdbook-mermaid install
        mdbook build --language ${{ matrix.language }} --dest-dir wiki/orbtk-book/${{ matrix.language }}

#workflows:
#  version: 2
#  build:
#    jobs:
#      - build
#      #- lint
#      - render-books
